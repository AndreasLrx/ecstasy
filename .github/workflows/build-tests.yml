name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build-gcc:
    name: Linux GCC
    runs-on: ubuntu-22.04

    steps:
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake
        sudo apt-get install -y gcovr
        sudo apt-get install -y libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TEST_SUITE=TRUE -DENABLE_TEST_COVERAGE=TRUE -DECSTASY_INTEGRATIONS_EVENT=TRUE -DECSTASY_INTEGRATIONS_SFML=TRUE

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j

    - name: Run Unit Tests
      run: cd ${{github.workspace}}/build && ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Collect Coverage Files
      run: |
        find build -iname "*.gcda" -or -iname "*.gcno" -exec cp {} . \;
        gcovr . --exclude-unreachable-branches --exclude-throw-branches --xml --output ./coverage.xml --exclude tests/
      
    - name: Upload Coverage Data
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.xml
        verbose: true
        fail_ci_if_error: true

  build-clang:
    name: Linux Clang (libstdc++)
    runs-on: ubuntu-22.04
    env:
      CC: clang-14
      CXX: clang++-14
      CXXFLAGS: -stdlib=libstdc++

    steps:
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common apt-transport-https
        curl -s https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo apt-add-repository -y 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main'
        sudo apt-get update
        sudo apt-get install -y ninja-build clang-14 libc++-14-dev libc++abi-14-dev libstdc++-11-dev
        sudo apt-get install -y libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TEST_SUITE=TRUE -DENABLE_TEST_COVERAGE=TRUE -DECSTASY_INTEGRATIONS_EVENT=TRUE -DECSTASY_INTEGRATIONS_SFML=TRUE

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j

    - name: Run Unit Tests
      run: cd ${{github.workspace}}/build && ctest -C ${{env.BUILD_TYPE}} --output-on-failure

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TEST_SUITE=TRUE -DECSTASY_INTEGRATIONS_EVENT=TRUE -DECSTASY_INTEGRATIONS_SFML=TRUE

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j

    - name: Run Unit Tests
      run: cd ${{github.workspace}}/build && ctest -C ${{env.BUILD_TYPE}} --output-on-failure