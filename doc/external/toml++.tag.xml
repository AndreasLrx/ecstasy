<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="class">
    <name>toml::array</name>
    <filename>classtoml_1_1array.html</filename>
    <base>toml::node</base>
    <member kind="function">
      <type></type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a29fc707cf66a79f3c3d93dadbe3b2719</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a3bd4611c96ce97d7e6991b7a4312370d</anchor>
      <arglist>(const array &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac552a63c329598d671e6531b0cef957b</anchor>
      <arglist>(array &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>acb17a58f1fbdb12aeaf8f7d1e8093e5c</anchor>
      <arglist>(ElemType &amp;&amp;val, ElemTypes &amp;&amp;... vals)</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a37f428f585188ce70c82f1df6935f5d5</anchor>
      <arglist>(const array &amp;)</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7e5e45777e08941abb2069a5991e1f31</anchor>
      <arglist>(array &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a352b6a99235216f070b5e97976663571</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a79a1fe77c03b33ea2b9d8d0a859c93e6</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae4e986f9fdb23090f9a0b3716a63e8bb</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad00610c0e18f02516de92b623dc4d0f5</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad7ed894e54ad3aaef6d7693c26b887d9</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1f1e4d93f52778613d0a7bcf74a23427</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a87cd0dcbebcfd661a0ae387255c0605e</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>acc533a7fa1ea5c68fce6f4fea5bc419c</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aeefdd01a2ce3f6bcd7aecfabd363d06b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a78db4190977034c4364674a2958855d4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab758b93eedbdc27112681f26440bee03</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa034144c580b3d8a4727c0cfbfebc214</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>abbecf0a51aa3e175bc5748ccf71063d8</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a792dc3fd7105185415925d4f9ab3ca1d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a2d2fc80512d08af7a934a6d02c7bf506</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae844f53a9604fb42f185a91616a72cbd</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a95985d66ecd4abf6c5822cbd0d239582</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a97b772796c962a635e8d5c50e7c03b3a</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5d4d3b502ef2e33107eb1d682b282c75</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a41d03d31a6ab168bc4b50046c4bbb50f</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5e6ed524c4548fdd2131dcbb38b8c766</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac1989a2c4d50f8493f97c23ee22e15e6</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a78a9e7b1d44f90eb55403e54d6d31e2b</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a3dedcb2261a528c59454fc9e0bb7c9fb</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a58c350366cbbab3eb430751212ba9b18</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae45534b573d10c7e2e1c5624153608f9</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8007db93bdeb82c8c77965ff72056f6b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a943378ff5912e9c732b4dee12d4bf2de</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a79871c2b52557b74da8302925b5624ee</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8f5736e45881203e362bcbb43ed90093</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a48206827982b5cffe51662adfc3aec2b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>afc3f86ca86c60deda39e69d24abcacca</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7708feaac3561b836e0789db0dfa6db4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa8fb689b36f44a4fa7c0ffccff20dbd9</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a10664e00054ea4021fec5144b69b8792</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a44db509dce6b7b77e563c822a5936abe</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5c2f4624498cba9e1e467b0eb2e9046e</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae47ca1cc4c61e94fed30aea72ca8d268</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a853bad0297ca4dcee57c97da2fe318e7</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae9f72a1b877f2ac66327a152d55aa9c6</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aeade4e0cafa3f57b4800e72baa843b1e</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8a5957e22aa2d0f4f9e6feaf9bfffa55</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a9c78848129a2a703c154e7cbe1a973d3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5ba3af18c63546da6f9d2ac3b5b77f64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a4c58dea5e8795e4b9f8df4f1e1473204</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac7652c1ab60af2ca1c7d52f0658639b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5d527ea6bfddad1025e90e4363c822cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af81d7b6a1257ad766a47d9276855a7c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max_size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae65a76add6d756fc7ba8f12a5aad983c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a02b773a1ff337692e78da429030c1610</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1ba073adc52c3df5ad29cfd7e5daa1d5</anchor>
      <arglist>(size_t new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a718c2031ead428aa52912741f6d094aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6e3ac9962c706a88c1001ff83a4084f3</anchor>
      <arglist>(size_t new_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab1aca2337ffce7e583a2cf303f16259f</anchor>
      <arglist>(size_t new_size, ElemType &amp;&amp;default_init_val, value_flags default_init_flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a22389a9ed9444fe52be10c4acbdec908</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a723388860d72c9a162137d0293366fb2</anchor>
      <arglist>(const_iterator first, const_iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa2a21958705629bde15aafae9598a2ec</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad307bea17e7640c57715d67ab8a777d4</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae548cf1dc26ade60733548a00a39b175</anchor>
      <arglist>(bool recursive=true) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6fc918a151ada40c713d6855af3021c2</anchor>
      <arglist>(bool recursive=true) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af99d72e29cef84f736d91d627b47a1dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adaa65bf63f29f898c27423306c165d68</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a17c7e34b433ea8907186dbb1788c9d37</anchor>
      <arglist>(const_iterator pos, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a55a9e6e742e556ea07573d29c23ce7df</anchor>
      <arglist>(const_iterator pos, size_t count, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a60a0d39bfd8721cef23e155f5504d54d</anchor>
      <arglist>(const_iterator pos, Iter first, Iter last, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1baecd5d579afb508886572674b89781</anchor>
      <arglist>(const_iterator pos, std::initializer_list&lt; ElemType &gt; ilist, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a4110b96386b33097a255f3694ac01d4a</anchor>
      <arglist>(const_iterator pos, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a37a8a283e6c1cbeef757b2e59489ee6c</anchor>
      <arglist>(const_iterator pos, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab7188537b351ef3a756b54b83e4b05b3</anchor>
      <arglist>(ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>emplace_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad1383e120e7f8d8fe54e07dab164bd6d</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d2b7360a2ea44282890e1ded3d3946a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1fd6d582bdadae6b104440aec7b6e383</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0b717d136b8a8b6f142a56056a570fed</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad1c332ae403fade90216726105419efc</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58fde40ef0b172d36bf293c251b25130</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca651e7fe7f377fe958b20678d08ef14</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9794ed57d952d8293ed3278a11e54ca2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a937af29dc15ef8e1af7950d925341cc3</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a20a0cfac8f31649544db5d9eead609f9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>acf55d2ffe0c31b6a8507fb1265444be2</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aef68f74119416a0a6d0a62f0f7d8d4ea</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>afbd39cca3959da4a1d8e1d220b6abe83</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9b4d952e01bd2fafe7c307d61d4a247f</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca7e24cd0070ce226defd71eb501c4cd</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8c3214e47f056a3a9bcdb66edd7fa97f</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2276f2cac96c095b4e4645ca5bebe0f9</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af1fae5bb4ad4da74199f0a77170c505e</anchor>
      <arglist>(std::ostream &amp;lhs, const array &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a06cf25e3f80c98d88e041ef9823976c0</anchor>
      <arglist>(const array &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af06c7437a0946a9d5e093d903b59f6a4</anchor>
      <arglist>(const array &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab87e435c5a41140e60cd2e703df96fbd</anchor>
      <arglist>(const array &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5b3c615e4ba8fd780b966f175070b554</anchor>
      <arglist>(const array &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>array_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a62a18471ca7c5b06204d2e26c963f833</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_array_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adfd38318d3390a76f073a83fd2f2aa21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8ee8179ddf1cb44fdf0b8d0700f55c2f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7cff1526a6d1f6157e0eab231b4757aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a56d1cba006dccc5ad9982b58a8b2ddc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adaf908b0cc3e8bcb1ee9ec9ec706d223</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a778b5b807ff7329f7de10237d73f29c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a50e6b032805760f3930e02923d9a84b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab2e1a5b5afb21b14461298f5494a8c35</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, array &amp; &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1e04521b2c24b0b01c3c59f3d20b8839</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, array &amp;&amp; &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>const array &amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7e8ed1b3d210f5d00480e27a3855994f</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const array &amp; &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>const array &amp;&amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab2b37b3f36abadf0962411a609d7ac8f</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const array &amp;&amp; &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a352b6a99235216f070b5e97976663571</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a79a1fe77c03b33ea2b9d8d0a859c93e6</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae4e986f9fdb23090f9a0b3716a63e8bb</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad00610c0e18f02516de92b623dc4d0f5</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad7ed894e54ad3aaef6d7693c26b887d9</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1f1e4d93f52778613d0a7bcf74a23427</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a87cd0dcbebcfd661a0ae387255c0605e</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>acc533a7fa1ea5c68fce6f4fea5bc419c</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aeefdd01a2ce3f6bcd7aecfabd363d06b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a78db4190977034c4364674a2958855d4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab758b93eedbdc27112681f26440bee03</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa034144c580b3d8a4727c0cfbfebc214</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>abbecf0a51aa3e175bc5748ccf71063d8</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a792dc3fd7105185415925d4f9ab3ca1d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a2d2fc80512d08af7a934a6d02c7bf506</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae844f53a9604fb42f185a91616a72cbd</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a95985d66ecd4abf6c5822cbd0d239582</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a97b772796c962a635e8d5c50e7c03b3a</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5d4d3b502ef2e33107eb1d682b282c75</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a41d03d31a6ab168bc4b50046c4bbb50f</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5e6ed524c4548fdd2131dcbb38b8c766</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac1989a2c4d50f8493f97c23ee22e15e6</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a78a9e7b1d44f90eb55403e54d6d31e2b</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a3dedcb2261a528c59454fc9e0bb7c9fb</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a58c350366cbbab3eb430751212ba9b18</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae45534b573d10c7e2e1c5624153608f9</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8007db93bdeb82c8c77965ff72056f6b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a943378ff5912e9c732b4dee12d4bf2de</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a79871c2b52557b74da8302925b5624ee</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8f5736e45881203e362bcbb43ed90093</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a48206827982b5cffe51662adfc3aec2b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>afc3f86ca86c60deda39e69d24abcacca</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7708feaac3561b836e0789db0dfa6db4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa8fb689b36f44a4fa7c0ffccff20dbd9</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a10664e00054ea4021fec5144b69b8792</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a44db509dce6b7b77e563c822a5936abe</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5c2f4624498cba9e1e467b0eb2e9046e</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae47ca1cc4c61e94fed30aea72ca8d268</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a853bad0297ca4dcee57c97da2fe318e7</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae9f72a1b877f2ac66327a152d55aa9c6</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aeade4e0cafa3f57b4800e72baa843b1e</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8a5957e22aa2d0f4f9e6feaf9bfffa55</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a9c78848129a2a703c154e7cbe1a973d3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5ba3af18c63546da6f9d2ac3b5b77f64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a4c58dea5e8795e4b9f8df4f1e1473204</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac7652c1ab60af2ca1c7d52f0658639b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5d527ea6bfddad1025e90e4363c822cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af81d7b6a1257ad766a47d9276855a7c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max_size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae65a76add6d756fc7ba8f12a5aad983c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a02b773a1ff337692e78da429030c1610</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1ba073adc52c3df5ad29cfd7e5daa1d5</anchor>
      <arglist>(size_t new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a718c2031ead428aa52912741f6d094aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6e3ac9962c706a88c1001ff83a4084f3</anchor>
      <arglist>(size_t new_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab1aca2337ffce7e583a2cf303f16259f</anchor>
      <arglist>(size_t new_size, ElemType &amp;&amp;default_init_val, value_flags default_init_flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a22389a9ed9444fe52be10c4acbdec908</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a723388860d72c9a162137d0293366fb2</anchor>
      <arglist>(const_iterator first, const_iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa2a21958705629bde15aafae9598a2ec</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad307bea17e7640c57715d67ab8a777d4</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae548cf1dc26ade60733548a00a39b175</anchor>
      <arglist>(bool recursive=true) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6fc918a151ada40c713d6855af3021c2</anchor>
      <arglist>(bool recursive=true) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af99d72e29cef84f736d91d627b47a1dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adaa65bf63f29f898c27423306c165d68</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a17c7e34b433ea8907186dbb1788c9d37</anchor>
      <arglist>(const_iterator pos, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a55a9e6e742e556ea07573d29c23ce7df</anchor>
      <arglist>(const_iterator pos, size_t count, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a60a0d39bfd8721cef23e155f5504d54d</anchor>
      <arglist>(const_iterator pos, Iter first, Iter last, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1baecd5d579afb508886572674b89781</anchor>
      <arglist>(const_iterator pos, std::initializer_list&lt; ElemType &gt; ilist, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a4110b96386b33097a255f3694ac01d4a</anchor>
      <arglist>(const_iterator pos, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a37a8a283e6c1cbeef757b2e59489ee6c</anchor>
      <arglist>(const_iterator pos, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab7188537b351ef3a756b54b83e4b05b3</anchor>
      <arglist>(ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>emplace_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad1383e120e7f8d8fe54e07dab164bd6d</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d2b7360a2ea44282890e1ded3d3946a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1fd6d582bdadae6b104440aec7b6e383</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0b717d136b8a8b6f142a56056a570fed</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad1c332ae403fade90216726105419efc</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58fde40ef0b172d36bf293c251b25130</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca651e7fe7f377fe958b20678d08ef14</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9794ed57d952d8293ed3278a11e54ca2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a937af29dc15ef8e1af7950d925341cc3</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a20a0cfac8f31649544db5d9eead609f9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>acf55d2ffe0c31b6a8507fb1265444be2</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aef68f74119416a0a6d0a62f0f7d8d4ea</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>afbd39cca3959da4a1d8e1d220b6abe83</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9b4d952e01bd2fafe7c307d61d4a247f</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca7e24cd0070ce226defd71eb501c4cd</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8c3214e47f056a3a9bcdb66edd7fa97f</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2276f2cac96c095b4e4645ca5bebe0f9</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a06cf25e3f80c98d88e041ef9823976c0</anchor>
      <arglist>(const array &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af06c7437a0946a9d5e093d903b59f6a4</anchor>
      <arglist>(const array &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab87e435c5a41140e60cd2e703df96fbd</anchor>
      <arglist>(const array &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5b3c615e4ba8fd780b966f175070b554</anchor>
      <arglist>(const array &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::date</name>
    <filename>structtoml_1_1date.html</filename>
    <member kind="function">
      <type></type>
      <name>date</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a5cbb79ab52538ec7a74022cf4fcfb129</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>date</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a6025b77738bf7ed2db704cc85297e74d</anchor>
      <arglist>(Y y, M m, D d) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>year</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>ad1dc522b115c69dc908540b1c6ff792b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>month</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a0528c722d0a81741a95f6e3a1116614e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>day</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a8ec7a7238b8edd3341b450a7b43ec011</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>af76134298f28a36f104515fa6ba018b0</anchor>
      <arglist>(const date &amp;lhs, const date &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a5e1b63040c6d403b8e0a717c77d9509d</anchor>
      <arglist>(const date &amp;lhs, const date &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a800189899a4daf5b8cdf1c5b252b772d</anchor>
      <arglist>(const date &amp;lhs, const date &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a0add90c8bea1fdc5ff50cbbeb5e169fc</anchor>
      <arglist>(const date &amp;lhs, const date &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a1861ff6d5850f8148ce002c75b2ab952</anchor>
      <arglist>(const date &amp;lhs, const date &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a8f74ab67a378a52e28478d5f768e4152</anchor>
      <arglist>(const date &amp;lhs, const date &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>aa24fddba6149a26f1dbeefe036126316</anchor>
      <arglist>(std::ostream &amp;lhs, const date &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::date_time</name>
    <filename>structtoml_1_1date__time.html</filename>
    <member kind="function">
      <type></type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a2c9ee1c5c94a6623e9cac5db65289d1f</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a8b084d38079cf71db0d0ac8465928dc2</anchor>
      <arglist>(const toml::date &amp;d, const toml::time &amp;t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a5394c8e6690f59e627f92b614b06be58</anchor>
      <arglist>(const toml::date &amp;d) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a73df51041eee08b984d38462ba3fdda4</anchor>
      <arglist>(const toml::time &amp;t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>aacba153f96e9637d536add5159bad99a</anchor>
      <arglist>(const toml::date &amp;d, const toml::time &amp;t, const toml::time_offset &amp;off) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_local</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>af0d6119984645eb015f2fad0ef487bbc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>toml::date</type>
      <name>date</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a89f398585f373d1e7bd59fe440212074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toml::time</type>
      <name>time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a18d5e772db4f61635643cda390c2b720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>optional&lt; toml::time_offset &gt;</type>
      <name>offset</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>af8596013f522b94a88d2caf69e90a1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a885cbe902aeadacb0953230ade9d8b9a</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a9ae0e032ffe90928c47b40bd8155dea3</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a4f67803fdc02fb5549ba213a9273a63b</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a7b2f0261ae38ef6dbb6de0fb35fbbf3b</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a1bceb05028f33a829d61ffc768eab78a</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a361fb1904f477e0a1f7acaa3cdd14abf</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a5a090cb9dfa0d6a3e74603ba702bbddc</anchor>
      <arglist>(std::ostream &amp;lhs, const date_time &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::inserter</name>
    <filename>structtoml_1_1inserter.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>toml::json_formatter</name>
    <filename>classtoml_1_1json__formatter.html</filename>
    <member kind="function">
      <type></type>
      <name>json_formatter</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>ade267ecca82e3bbac3d1392abab91be9</anchor>
      <arglist>(const toml::node &amp;source, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>json_formatter</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a51785aa8ef373a9136e896fafabd53be</anchor>
      <arglist>(const toml::parse_result &amp;result, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr format_flags</type>
      <name>default_flags</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a4541a4662894ce8936f6f2c3ab90fe2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a2b88bc230c589c1fad25ffd8df96b74e</anchor>
      <arglist>(std::ostream &amp;lhs, json_formatter &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a5eefe4e5ca640b12fbb09fd521eab335</anchor>
      <arglist>(std::ostream &amp;lhs, json_formatter &amp;&amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::key</name>
    <filename>classtoml_1_1key.html</filename>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ac978efd3b48ec0a5c14f08618e4dbe23</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a5119f122c15687a2f0f81b270a627de2</anchor>
      <arglist>(std::string_view k, source_region &amp;&amp;src={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a0718eb26f4d9c1a4c0fb928efb0d6f81</anchor>
      <arglist>(std::string_view k, const source_region &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a788b1bbeaf636dccc4a78f832bf123e0</anchor>
      <arglist>(std::string &amp;&amp;k, source_region &amp;&amp;src={}) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ab86ff590f222d57b8f4630901298d8da</anchor>
      <arglist>(std::string &amp;&amp;k, const source_region &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a981f5ee2fbd822d47d0b347c5df55f11</anchor>
      <arglist>(const char *k, source_region &amp;&amp;src={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ad5f26b37172e34a8c70e848ad7911710</anchor>
      <arglist>(const char *k, const source_region &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a67cfed717c84773ab3fe6ec1b7936fa7</anchor>
      <arglist>(std::wstring_view k, source_region &amp;&amp;src={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aba2cb69db8cae7cbc60899a0ee7618d3</anchor>
      <arglist>(std::wstring_view k, const source_region &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>str</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a0ca779e816081627f78965683182d4dc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string_view</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a0f580806c0894ea820c533a9f6e0fa91</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a2baa48f26dac4a10a8328706f9386417</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>data</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a49f230dc58174f399f49100115ee088f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a5ffa3226fa66f1be190178572a87a000</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a82a81d4a4e4d502b661ee2ba10810bea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a78eb7afc69ecd78f4f6ded062f2f7ea7</anchor>
      <arglist>(std::ostream &amp;lhs, const key &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aa1d636ad061ad2c8e33c629e112bba5e</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a1255e940048a362bda11ee240b3f1ffe</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a7a6f49b1bdf3e234f7598481a4afd5db</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ae300be177925b12b73568e194c1444ae</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ae51dcf0f86bed0f6f5ce24d326c0badc</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a3c20053f6eae90f946535a95225f522a</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a545b27567960385af1c8ae669029d7dd</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a24ea2ab9799ab7fec679f2dae3afccf2</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a5578fc46610d6f6e684fbffdf3f61a44</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a9c59103b835fb600dbb6c808f8c4f8a8</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ad48d1d36a11a9434bc339987838b08f6</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a61e19637671ad5c5856eafd5753e9b65</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aed4a71da8d0ffb75d847ab2c26948a1c</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a165b2057b0144350b1c291ffb0956122</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a1bacd712822950e9594fd288a236c9cb</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a780d9a226184919f080acf0b0a676400</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aa85755cf51a2ee6d616aa03a8de8b4b0</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aa89096b9f6b364702858f2dc6734987a</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>const char *</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a38a33d5010936195ac2083e428165512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a40c42bc323383db54972b5752b9ad4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ab1691956be4ffe1c604e8e66acdc237e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a9b37a10b4aff1e6e7902301789f579c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>str</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a0ca779e816081627f78965683182d4dc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string_view</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a0f580806c0894ea820c533a9f6e0fa91</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a2baa48f26dac4a10a8328706f9386417</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>data</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a49f230dc58174f399f49100115ee088f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a5ffa3226fa66f1be190178572a87a000</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a82a81d4a4e4d502b661ee2ba10810bea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aa1d636ad061ad2c8e33c629e112bba5e</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a1255e940048a362bda11ee240b3f1ffe</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a7a6f49b1bdf3e234f7598481a4afd5db</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ae300be177925b12b73568e194c1444ae</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ae51dcf0f86bed0f6f5ce24d326c0badc</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a3c20053f6eae90f946535a95225f522a</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a545b27567960385af1c8ae669029d7dd</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a24ea2ab9799ab7fec679f2dae3afccf2</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a5578fc46610d6f6e684fbffdf3f61a44</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a9c59103b835fb600dbb6c808f8c4f8a8</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ad48d1d36a11a9434bc339987838b08f6</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a61e19637671ad5c5856eafd5753e9b65</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aed4a71da8d0ffb75d847ab2c26948a1c</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a165b2057b0144350b1c291ffb0956122</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a1bacd712822950e9594fd288a236c9cb</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a780d9a226184919f080acf0b0a676400</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aa85755cf51a2ee6d616aa03a8de8b4b0</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aa89096b9f6b364702858f2dc6734987a</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::node</name>
    <filename>classtoml_1_1node.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a68de6772e259ef122c00b0a9c7b63516</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a834e10ece19d04b4d774d5f224d50b8f</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5d9191dc545ecded3bc8f7706c63edad</anchor>
      <arglist>(node_type ntype) const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d2b7360a2ea44282890e1ded3d3946a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a10f389035ce13abb00a1191358af6334</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a50a2501af7e42b0fab060206dde7a99e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>accce7655b0cc340591a755412fde2ed7</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa09263a05ef361ad233e710308fce690</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeddf9eebbd4ece799e5675e2d9d59e4a</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa95180487162e844129031842d8a9580</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac5390ac64f018947edc75802a53505a5</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad8cdb68a69bdc13cda7d4f7663e57847</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>afcc263be60c33b3f92646b5cfa07393e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a422f765df7ee04fa13254adcda29ae8d</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1c86fb0bd8e241c4768108988a59332a</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9266c340ccc94b3349704e91bf12d42d</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a900f7589762e01c91fb5b07a2c8e9202</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac0ca09368b80436100a1eb042daccacc</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a43bc08c435e4fbf5ebbcf34f902a6377</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8560597586915efad21f288f591c23cd</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9e1419c3f99eda7767d114095b1ad793</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a61d3f2c50952a1c989f82b54c5c2eeda</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aea93e54eb94c6cb48d240766983fa493</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>adcf92e730609341bb1e3c0ae1d12c36f</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2d88fef8e892aae05c3e9886fdef7dce</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ae1312e66ac95fc1cf6ae12f48e000b2a</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa167e4d8d6e6db784affe8490e178c8b</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7ed34b94f3999b03db45fd5e0830637d</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a47c55af38414fdb32075c378b3405bfa</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a43bea93af60b57ecc98efaf50dccfe9b</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4ceaa3a398fa76c134c902ec1c4778aa</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a45dd3436280deeb307127278f816e8e9</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac15b9b4e6aa05ca616bac37610af27fc</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7ebf75d2978ae1ea32daff4c063217e7</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d7b9d4defe5ffc3f1398715f5e325b3</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1fd6d582bdadae6b104440aec7b6e383</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0b717d136b8a8b6f142a56056a570fed</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad1c332ae403fade90216726105419efc</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58fde40ef0b172d36bf293c251b25130</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca651e7fe7f377fe958b20678d08ef14</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9794ed57d952d8293ed3278a11e54ca2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a937af29dc15ef8e1af7950d925341cc3</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a20a0cfac8f31649544db5d9eead609f9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>acf55d2ffe0c31b6a8507fb1265444be2</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aef68f74119416a0a6d0a62f0f7d8d4ea</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>afbd39cca3959da4a1d8e1d220b6abe83</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9b4d952e01bd2fafe7c307d61d4a247f</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca7e24cd0070ce226defd71eb501c4cd</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8c3214e47f056a3a9bcdb66edd7fa97f</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2276f2cac96c095b4e4645ca5bebe0f9</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a68de6772e259ef122c00b0a9c7b63516</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a834e10ece19d04b4d774d5f224d50b8f</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5d9191dc545ecded3bc8f7706c63edad</anchor>
      <arglist>(node_type ntype) const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d2b7360a2ea44282890e1ded3d3946a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a10f389035ce13abb00a1191358af6334</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a50a2501af7e42b0fab060206dde7a99e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>accce7655b0cc340591a755412fde2ed7</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa09263a05ef361ad233e710308fce690</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeddf9eebbd4ece799e5675e2d9d59e4a</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa95180487162e844129031842d8a9580</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac5390ac64f018947edc75802a53505a5</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad8cdb68a69bdc13cda7d4f7663e57847</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>afcc263be60c33b3f92646b5cfa07393e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a422f765df7ee04fa13254adcda29ae8d</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1c86fb0bd8e241c4768108988a59332a</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9266c340ccc94b3349704e91bf12d42d</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a900f7589762e01c91fb5b07a2c8e9202</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac0ca09368b80436100a1eb042daccacc</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a43bc08c435e4fbf5ebbcf34f902a6377</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8560597586915efad21f288f591c23cd</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9e1419c3f99eda7767d114095b1ad793</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a61d3f2c50952a1c989f82b54c5c2eeda</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aea93e54eb94c6cb48d240766983fa493</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>adcf92e730609341bb1e3c0ae1d12c36f</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2d88fef8e892aae05c3e9886fdef7dce</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ae1312e66ac95fc1cf6ae12f48e000b2a</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa167e4d8d6e6db784affe8490e178c8b</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7ed34b94f3999b03db45fd5e0830637d</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a47c55af38414fdb32075c378b3405bfa</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a43bea93af60b57ecc98efaf50dccfe9b</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4ceaa3a398fa76c134c902ec1c4778aa</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a45dd3436280deeb307127278f816e8e9</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac15b9b4e6aa05ca616bac37610af27fc</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7ebf75d2978ae1ea32daff4c063217e7</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d7b9d4defe5ffc3f1398715f5e325b3</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1fd6d582bdadae6b104440aec7b6e383</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0b717d136b8a8b6f142a56056a570fed</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad1c332ae403fade90216726105419efc</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58fde40ef0b172d36bf293c251b25130</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca651e7fe7f377fe958b20678d08ef14</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9794ed57d952d8293ed3278a11e54ca2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a937af29dc15ef8e1af7950d925341cc3</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a20a0cfac8f31649544db5d9eead609f9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>acf55d2ffe0c31b6a8507fb1265444be2</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aef68f74119416a0a6d0a62f0f7d8d4ea</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>afbd39cca3959da4a1d8e1d220b6abe83</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9b4d952e01bd2fafe7c307d61d4a247f</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca7e24cd0070ce226defd71eb501c4cd</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8c3214e47f056a3a9bcdb66edd7fa97f</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2276f2cac96c095b4e4645ca5bebe0f9</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::node_view</name>
    <filename>classtoml_1_1node__view.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ViewedType</type>
      <name>viewed_type</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a1550f4e57532fd03b6c3e9d87805c03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a0d8bf511db11b67081bea35c25e4ca9e</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a199ca0c01e27a74b2ad6dbe554113fb8</anchor>
      <arglist>(viewed_type *node) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af40ced8902e81e354af44a033f05d682</anchor>
      <arglist>(viewed_type &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6f2a4c199237385a61741ab30a64b500</anchor>
      <arglist>(const node_view &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a79091432e79c07c4bb8700f44adfb8d6</anchor>
      <arglist>(node_view &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>node_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afa455c0337a6fe4d1ca533e10750ba9e</anchor>
      <arglist>(const node_view &amp;) &amp;noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>node_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a3dd8195e3971ebb2110b812783cff136</anchor>
      <arglist>(node_view &amp;&amp;) &amp;noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ab8ee0ffcb999601a9b0247c099aa9250</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>viewed_type *</type>
      <name>node</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afb42ba6fdddfb407bd37b697a407246d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2483cf1a8314661919b9066ce62c9621</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a70b567ea582c472fe95a89b5b842cee6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a879d945d2880fc216085d7deb087ad38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa58f8de47be5f53738b1a04d7e9d05af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a79b47268155d955b8e2c027b0c2ae983</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ab9c835ddf017f250d84fa5d5736e8520</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a43ea3eed7b0f133fa7d752a9322c758e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a107732370c62402b1101a78e7382fd8b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa7ee0d1f396e1283c4a11d07b9400897</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4dc7cf8a57db73fa799a939f7acd549d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a98a6bc33e3ba573c37a069126acf0b8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5a380f773ae291c942a03e45a88c94b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6cc459be36698ec5a9ac0d00b4480eae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a21d7c55a33aa1c868dde5cbaa7e54ec2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2a2902064421f401e80ea687cef536da</anchor>
      <arglist>(node_type ntype, viewed_type *&amp;first_nonmatch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afe0abd51e0e108b306be2a3ee9561cca</anchor>
      <arglist>(node_type ntype) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a29c82d83b1d64f016eb42f95fd37e346</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5cd619f292f91fc9d417c61905ea8204</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5b73b7eeaa97666ebee3d604171a5576</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a8593d229d139b05dc81d5d2d97ce3a1f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a33c4dd8fb9498f6de6fb06714b508d17</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad21750582ec6303e0b257b132ec4409d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a926821efb73ad7292e3f14841c54871b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a9fec898a7fa88ddbb396fe3b2a81c945</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a94a7cf14d6ca777de56abd5cdbe8eece</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a94087a35223d51ca76f22a361031bd7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5bcb3ac0edcc516efda53fd022057282</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2d558e7799bc4e24adda096446eb384d</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>abb51a912462a258379b968c4074f8324</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a314e5d666dcda3493ff9aa2c0816f53c</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aec5c764293a7eeb20009a484b34d7c3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa5f84bfab779c71a07b04ca0b2db863f</anchor>
      <arglist>(Func &amp;&amp;visitor) const noexcept(visit_is_nothrow&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2dde12894f70530d80de45a03eae78fa</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a44b94290029477305f0b6720d72bf965</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a59c5432fb77b50ef22098e17d4f956d5</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ab265c6f0304647bcd8074ad081f2bf17</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a35021e65758dc0be505916532b69a7d8</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a157c1eafb7bdf8f33398106017d1b20c</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5d13b026efcd31812415ead30eeb69db</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a170109f0b77888f54b2fcdb8fee0ab90</anchor>
      <arglist>(std::ostream &amp;os, const node_view &amp;nv)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a191820d030035d564fe09f5eb251b927</anchor>
      <arglist>(const node_view &amp;lhs, const node_view&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a3dc82b95849d7e6bd89b5496fe96beaa</anchor>
      <arglist>(const node_view &amp;lhs, const node_view&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a754bdba78869afe6bccb4b51e0a77e45</anchor>
      <arglist>(const node_view &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a3b39aedbada6221a4e3857b0f0235843</anchor>
      <arglist>(const node_view &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad9fd96826fcee43cd1ea1ccf6e22c895</anchor>
      <arglist>(const node_view &amp;lhs, const toml::value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4dba3ed7356704669e4175fa7c8f5c34</anchor>
      <arglist>(const node_view &amp;lhs, const T &amp;rhs) noexcept(!impl::is_wide_string&lt; T &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>abe826c97f2b451ee287ecf37f46517fb</anchor>
      <arglist>(const node_view &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept(!impl::is_wide_string&lt; T &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad4b4144f8033c78e5410f701e5ae7e30</anchor>
      <arglist>(const node_view &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept(!impl::is_wide_string&lt; T &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a191820d030035d564fe09f5eb251b927</anchor>
      <arglist>(const node_view &amp;lhs, const node_view&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a3dc82b95849d7e6bd89b5496fe96beaa</anchor>
      <arglist>(const node_view &amp;lhs, const node_view&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a754bdba78869afe6bccb4b51e0a77e45</anchor>
      <arglist>(const node_view &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a3b39aedbada6221a4e3857b0f0235843</anchor>
      <arglist>(const node_view &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad9fd96826fcee43cd1ea1ccf6e22c895</anchor>
      <arglist>(const node_view &amp;lhs, const toml::value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4dba3ed7356704669e4175fa7c8f5c34</anchor>
      <arglist>(const node_view &amp;lhs, const T &amp;rhs) noexcept(!impl::is_wide_string&lt; T &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>abe826c97f2b451ee287ecf37f46517fb</anchor>
      <arglist>(const node_view &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept(!impl::is_wide_string&lt; T &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad4b4144f8033c78e5410f701e5ae7e30</anchor>
      <arglist>(const node_view &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept(!impl::is_wide_string&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2483cf1a8314661919b9066ce62c9621</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a70b567ea582c472fe95a89b5b842cee6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a879d945d2880fc216085d7deb087ad38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa58f8de47be5f53738b1a04d7e9d05af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a79b47268155d955b8e2c027b0c2ae983</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ab9c835ddf017f250d84fa5d5736e8520</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a43ea3eed7b0f133fa7d752a9322c758e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a107732370c62402b1101a78e7382fd8b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa7ee0d1f396e1283c4a11d07b9400897</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4dc7cf8a57db73fa799a939f7acd549d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a98a6bc33e3ba573c37a069126acf0b8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5a380f773ae291c942a03e45a88c94b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6cc459be36698ec5a9ac0d00b4480eae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a21d7c55a33aa1c868dde5cbaa7e54ec2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2a2902064421f401e80ea687cef536da</anchor>
      <arglist>(node_type ntype, viewed_type *&amp;first_nonmatch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afe0abd51e0e108b306be2a3ee9561cca</anchor>
      <arglist>(node_type ntype) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a29c82d83b1d64f016eb42f95fd37e346</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5cd619f292f91fc9d417c61905ea8204</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5b73b7eeaa97666ebee3d604171a5576</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a8593d229d139b05dc81d5d2d97ce3a1f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a33c4dd8fb9498f6de6fb06714b508d17</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad21750582ec6303e0b257b132ec4409d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a926821efb73ad7292e3f14841c54871b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a9fec898a7fa88ddbb396fe3b2a81c945</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a94a7cf14d6ca777de56abd5cdbe8eece</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a94087a35223d51ca76f22a361031bd7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5bcb3ac0edcc516efda53fd022057282</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2d558e7799bc4e24adda096446eb384d</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>abb51a912462a258379b968c4074f8324</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a314e5d666dcda3493ff9aa2c0816f53c</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aec5c764293a7eeb20009a484b34d7c3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa5f84bfab779c71a07b04ca0b2db863f</anchor>
      <arglist>(Func &amp;&amp;visitor) const noexcept(visit_is_nothrow&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2dde12894f70530d80de45a03eae78fa</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a44b94290029477305f0b6720d72bf965</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a59c5432fb77b50ef22098e17d4f956d5</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ab265c6f0304647bcd8074ad081f2bf17</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a35021e65758dc0be505916532b69a7d8</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a157c1eafb7bdf8f33398106017d1b20c</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5d13b026efcd31812415ead30eeb69db</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::parse_error</name>
    <filename>classtoml_1_1parse__error.html</filename>
    <member kind="function">
      <type>std::string_view</type>
      <name>description</name>
      <anchorfile>classtoml_1_1parse__error.html</anchorfile>
      <anchor>a5582e9d66f8aa3f6ef442c0a04d5282f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1parse__error.html</anchorfile>
      <anchor>a8168b4941305654cf4ba8fc96efd0514</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1parse__error.html</anchorfile>
      <anchor>a90796878877b2a028354f643be725cf6</anchor>
      <arglist>(std::ostream &amp;lhs, const parse_error &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::parse_result</name>
    <filename>classtoml_1_1parse__result.html</filename>
    <member kind="function">
      <type></type>
      <name>parse_result</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a49f926286dae7ed5a6298f5a3656548b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>parse_result</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a058b76f39fb5a971585538f2d4098ba5</anchor>
      <arglist>(parse_result &amp;&amp;res) noexcept</arglist>
    </member>
    <member kind="function">
      <type>parse_result &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aa4c2c770a8d214f9d508582233ff1d84</anchor>
      <arglist>(parse_result &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~parse_result</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ad9e22f09854af4c36860d61e0c0f25b1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>succeeded</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ab5bfcd6ed385016395029bd69ad78a3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failed</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9097bc552007537f840602ceca00e99b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>af66ea78a6dd881521ce865a372298e12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>toml::table &amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a47d2ead20ae9d1681210c63319a6a162</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>toml::table &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a77b470b66dd401a0a929006dd788b882</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const toml::table &amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a993f5d59c4b10f87138f8abb8a16d51d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator toml::table &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a5e14e22d4d68b27c11711a3319dc6bf9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator toml::table &amp;&amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a8dca1600886954b38b99a4a4f9cb77c4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const toml::table &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9d059289edaf6c7fb71916b21a2f9c9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>parse_error &amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aefbb9aafdf00fa1ac979962d22e12e68</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>parse_error &amp;&amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ab07914228f9f7436628c99df454f177d</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const parse_error &amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9a5929b01df9a7f7f986b8431cefd2b8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator parse_error &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>abc8a693cb538441b5974eff38c716669</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator parse_error &amp;&amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9f70aa665d84aaf5f936dd27f6c95c4a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const parse_error &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a43df64e02443b2abfd9d2c86c5e4c30a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a09972ac3195147c36fcb40386c863a35</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a1296ae08b7d147c6b83f1ba07fc4186f</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aebf8e6383263bf51e1145949250ca779</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a57deb2b5e41a3fd89af32f6a8092a4c1</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a1d945519896bd0095b4ed6cbb9215774</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9f9d6bd799058036b11d8de03b43bb57</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a29af8ed25f2bb21266b9dd2004c38f2c</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a84997148a9f0113e39233da93844c6d1</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a8825eaef011c7dbb5c1d1e46584e90bc</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a1d91207197c22f396acba5d46995d8ab</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a67f55af8782d160d14026af394b2954b</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a025653d2720d17884461814ae3473367</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ad4eaa8dc3cc144a912a63d9f95331572</anchor>
      <arglist>(std::ostream &amp;os, const parse_result &amp;result)</arglist>
    </member>
    <member kind="typedef">
      <type>table_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aae503c11e9f9162de5cbef5e2c9f4863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_table_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>abf92ffb48c1f4d0f129f4032708d4ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>table_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a3f641e942f1518dffad6fcc7dc13893d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_table_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a910f13933a0547a2920404287829781f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_table_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>af58212d8a367e5c1d38eb5d58708754b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a336d398e329f08195d714ff02fdffca6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_table_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a154d32bca3ea50dc5030372675a85a65</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_table_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>afa4f821ad60ceb06327cec6b42b05071</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>succeeded</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ab5bfcd6ed385016395029bd69ad78a3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failed</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9097bc552007537f840602ceca00e99b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>af66ea78a6dd881521ce865a372298e12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>toml::table &amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a47d2ead20ae9d1681210c63319a6a162</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>toml::table &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a77b470b66dd401a0a929006dd788b882</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const toml::table &amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a993f5d59c4b10f87138f8abb8a16d51d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator toml::table &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a5e14e22d4d68b27c11711a3319dc6bf9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator toml::table &amp;&amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a8dca1600886954b38b99a4a4f9cb77c4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const toml::table &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9d059289edaf6c7fb71916b21a2f9c9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>parse_error &amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aefbb9aafdf00fa1ac979962d22e12e68</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>parse_error &amp;&amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ab07914228f9f7436628c99df454f177d</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const parse_error &amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9a5929b01df9a7f7f986b8431cefd2b8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator parse_error &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>abc8a693cb538441b5974eff38c716669</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator parse_error &amp;&amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9f70aa665d84aaf5f936dd27f6c95c4a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const parse_error &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a43df64e02443b2abfd9d2c86c5e4c30a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a09972ac3195147c36fcb40386c863a35</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a1296ae08b7d147c6b83f1ba07fc4186f</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aebf8e6383263bf51e1145949250ca779</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a57deb2b5e41a3fd89af32f6a8092a4c1</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a1d945519896bd0095b4ed6cbb9215774</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9f9d6bd799058036b11d8de03b43bb57</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a29af8ed25f2bb21266b9dd2004c38f2c</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a84997148a9f0113e39233da93844c6d1</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a8825eaef011c7dbb5c1d1e46584e90bc</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a1d91207197c22f396acba5d46995d8ab</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a67f55af8782d160d14026af394b2954b</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a025653d2720d17884461814ae3473367</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::path</name>
    <filename>classtoml_1_1path.html</filename>
    <member kind="function">
      <type></type>
      <name>path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>accc6964f93bc7990f38263894d4daae6</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aabc43d93056c759d389085b32935ec2a</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a4f340e37cfb32ca1fdfebf24e5b842b4</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad585b73db97202e2b4841a64773046e5</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a3b120d3a25c2f3caffaba984ecf19bdc</anchor>
      <arglist>(const path &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a4b65042b43757e2d509d1563f4ee5342</anchor>
      <arglist>(path &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a129b1539ef880b97468f26ac53538120</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ac482e0b0187449abdbaf74830e0f1e48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af22c11324f36da827d4256b904d6e421</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae5dce1e849fac73d89169795e53e15f3</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const path_component &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa15b77d275df1147844843404b3def4b</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a660ab69db8a42b622bbf623d58397da4</anchor>
      <arglist>(const path &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a630751521383d7072a580a9b8e1e3f4f</anchor>
      <arglist>(path &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af5da17b2697b6d93ed6a111b7a05f569</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a50ed97223baadcbf26f4c2311394c04b</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a7cb81f8977d4499d0b4e17ac2965cdcc</anchor>
      <arglist>(const path &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae3110f90fa002bb2d5046a575811a57f</anchor>
      <arglist>(path &amp;&amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae08245751676ffd3261540e9d9a4ce16</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>adcbcf8f53945d889d525a9562e380308</anchor>
      <arglist>(std::wstring_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aabc9213e26b1db7d87fbfc504e39695f</anchor>
      <arglist>(const path &amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a4eeaed05f49c2b9017bef230754f3777</anchor>
      <arglist>(path &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a71085a959e83687873f72aeffe03a242</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a834f7fe3bfb77ca19faccf5394c4b381</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a224e1f74cc7773354062d5d69ec0a90e</anchor>
      <arglist>(const path &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a05d52919fcca2c2e058a52e4fe6e07f8</anchor>
      <arglist>(path &amp;&amp;p)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>add3d5c222320fab26fd5cadd9a610e04</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae4be853daa76de724446f8aa2bff4b0f</anchor>
      <arglist>(std::wstring_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>acf3f8ebc882216590047e0fd9ca679e2</anchor>
      <arglist>(const path &amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ac0ea4613a8ce311699284d22753a966c</anchor>
      <arglist>(path &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a97cca814a51b425e1baf310d5672fbe4</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa30721d1f0b21c4d42176063dd7ad08a</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a109a0d82839904cd0808388023305dc4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>truncate</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa4140e7e34e06546d509335037d1101b</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>truncated</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a2f4f4b86e0a06edd27668dc12410e86b</anchor>
      <arglist>(size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>parent</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a0efb28707c4366481ca6e549c1d31a78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>leaf</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ace0a076c96fb0b46828de5d4f59ade5d</anchor>
      <arglist>(size_t n=1) const</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>subpath</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>afc5f7494ca4cd2a574619d7ffb080cd3</anchor>
      <arglist>(const_iterator start, const_iterator end) const</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>subpath</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa7e62837fc83f9a78e942c5f4105b8f0</anchor>
      <arglist>(size_t start, size_t length) const</arglist>
    </member>
    <member kind="friend">
      <type>friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a8595d795b316e2ec04e2257cecd2aa7c</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa752dbb500cd4fa6efe4195266852ada</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a238f3a1d147825f4596718983ff4eea2</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af6cb0b10895f5308e1b02aec607cb5a0</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae4c30c186c418ed4e7c9cc0ce1c2d167</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a5d23cf873bac38cf71970fa3710a8cc2</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a7c09a0a727d62a8a0526df213bf609f2</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a85f0a0111e2b80bebe29d4ce0085e4a6</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>acaa57e919274df170a42fb906fe2b5a4</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a4aac6128cf3096aad26b0b0a96c2146b</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ac52129303944b45af80b81ad7661f0b9</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a87379c0582c782cff4740608e0343158</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a2149371c079844c9891a92fa74a89d38</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a6151f164638727d9c4df34087ec43044</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a6c525194daf7a573eae71f4b9e33ee58</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; path_component &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad752d8838221c179af93c94d8a7ed3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; path_component &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aaed31ecb434c644dc316042b744a6a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a4d44a1165c0b5dc1b3171db952b56afd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a884ed05a1f4ad2a2d4fe9133eb72a391</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad757a451dd6902f26a8d2ad3c3f15194</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>add0dbda00d37c1838b55de73f31c2dc6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>adc73ea43ee4542041c58186691f665e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aae5ffcde5edfbe8ae33cadafdac34bfa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a660ab69db8a42b622bbf623d58397da4</anchor>
      <arglist>(const path &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a630751521383d7072a580a9b8e1e3f4f</anchor>
      <arglist>(path &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af5da17b2697b6d93ed6a111b7a05f569</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a50ed97223baadcbf26f4c2311394c04b</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a7cb81f8977d4499d0b4e17ac2965cdcc</anchor>
      <arglist>(const path &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae3110f90fa002bb2d5046a575811a57f</anchor>
      <arglist>(path &amp;&amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae08245751676ffd3261540e9d9a4ce16</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>adcbcf8f53945d889d525a9562e380308</anchor>
      <arglist>(std::wstring_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aabc9213e26b1db7d87fbfc504e39695f</anchor>
      <arglist>(const path &amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a4eeaed05f49c2b9017bef230754f3777</anchor>
      <arglist>(path &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a71085a959e83687873f72aeffe03a242</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a834f7fe3bfb77ca19faccf5394c4b381</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a224e1f74cc7773354062d5d69ec0a90e</anchor>
      <arglist>(const path &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a05d52919fcca2c2e058a52e4fe6e07f8</anchor>
      <arglist>(path &amp;&amp;p)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>add3d5c222320fab26fd5cadd9a610e04</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae4be853daa76de724446f8aa2bff4b0f</anchor>
      <arglist>(std::wstring_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>acf3f8ebc882216590047e0fd9ca679e2</anchor>
      <arglist>(const path &amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ac0ea4613a8ce311699284d22753a966c</anchor>
      <arglist>(path &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a97cca814a51b425e1baf310d5672fbe4</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa30721d1f0b21c4d42176063dd7ad08a</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a8d70d707cbd38ffc03fcb3b6f81069fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a48e8847229969e912855c71a8c59c094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::wstring</type>
      <name>wide_str</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a0a824034b0ef08cb2e497af21858a574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::wstring</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ac77a8dffca78bd3091b7db123837097b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a0f19c68fa53ab75540f2ebf28088bd68</anchor>
      <arglist>(std::ostream &amp;os, const path &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a109a0d82839904cd0808388023305dc4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>truncate</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa4140e7e34e06546d509335037d1101b</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>truncated</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a2f4f4b86e0a06edd27668dc12410e86b</anchor>
      <arglist>(size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>parent</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a0efb28707c4366481ca6e549c1d31a78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>leaf</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ace0a076c96fb0b46828de5d4f59ade5d</anchor>
      <arglist>(size_t n=1) const</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>subpath</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>afc5f7494ca4cd2a574619d7ffb080cd3</anchor>
      <arglist>(const_iterator start, const_iterator end) const</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>subpath</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa7e62837fc83f9a78e942c5f4105b8f0</anchor>
      <arglist>(size_t start, size_t length) const</arglist>
    </member>
    <member kind="friend">
      <type>friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a8595d795b316e2ec04e2257cecd2aa7c</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa752dbb500cd4fa6efe4195266852ada</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a238f3a1d147825f4596718983ff4eea2</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af6cb0b10895f5308e1b02aec607cb5a0</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae4c30c186c418ed4e7c9cc0ce1c2d167</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a5d23cf873bac38cf71970fa3710a8cc2</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a7c09a0a727d62a8a0526df213bf609f2</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a85f0a0111e2b80bebe29d4ce0085e4a6</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>acaa57e919274df170a42fb906fe2b5a4</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a4aac6128cf3096aad26b0b0a96c2146b</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ac52129303944b45af80b81ad7661f0b9</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a87379c0582c782cff4740608e0343158</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a2149371c079844c9891a92fa74a89d38</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a6151f164638727d9c4df34087ec43044</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a6c525194daf7a573eae71f4b9e33ee58</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::path_component</name>
    <filename>classtoml_1_1path__component.html</filename>
    <member kind="function">
      <type></type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a71021caeadfba986add66776fde75afc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>ae8588444d8e20eedda3c7c9de020211d</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a0a43eb66501060d7904e92ce83992231</anchor>
      <arglist>(std::string_view key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>ae5cabcb9ca01c6fe1a523ebaf27b8203</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a7b6ed29a247bfb453e67e84c4000ad32</anchor>
      <arglist>(const path_component &amp;pc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a8510261dadffa958e0dd334fc442bff2</anchor>
      <arglist>(path_component &amp;&amp;pc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>aa32a4eef434a839c7379e5c9a734be42</anchor>
      <arglist>(const path_component &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a2a9f790c3f54919bbeb6617d27df8dbf</anchor>
      <arglist>(path_component &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a8a1c7128de9bde5c4e17037a827fe050</anchor>
      <arglist>(size_t new_index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a6f6d6747a56a2480608654f682816df2</anchor>
      <arglist>(std::string_view new_key)</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a16ae3aa3861f989a6aa6ec7d5f7533f6</anchor>
      <arglist>(std::wstring_view new_key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a9023bc344bbf001fb54661491d52ed21</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>path_component_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a59858d261f3e4e9e67d83835163312d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>index</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>aa2c540242b230123321196a87267fd58</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator size_t</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a0776d976060500ceba2491dbcffa04e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>key</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a222d79d89d6fdf075e948aa2a91ae375</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const std::string &amp;</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>aa6f05d78ce148082e85ac7f648ef1b6a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a9aef313f246e34a691c7e7475a62f3dd</anchor>
      <arglist>(const path_component &amp;lhs, const path_component &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a6ebe7d221b72eff60b9570c9e87aaa9a</anchor>
      <arglist>(const path_component &amp;lhs, const path_component &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>index</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>aa2c540242b230123321196a87267fd58</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator size_t</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a0776d976060500ceba2491dbcffa04e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>key</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a222d79d89d6fdf075e948aa2a91ae375</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const std::string &amp;</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>aa6f05d78ce148082e85ac7f648ef1b6a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a9aef313f246e34a691c7e7475a62f3dd</anchor>
      <arglist>(const path_component &amp;lhs, const path_component &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a6ebe7d221b72eff60b9570c9e87aaa9a</anchor>
      <arglist>(const path_component &amp;lhs, const path_component &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::source_position</name>
    <filename>structtoml_1_1source__position.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>accba2f34a07d8b453b8f2f6baf2d73cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>source_index</type>
      <name>line</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>ab21cac59798d70e25fe97ac7433763cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_index</type>
      <name>column</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a1ca6d0db40c69d2784703011f7cf5434</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a2661adb822c0291c5328d9d00e4b9a8f</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a90fec8fa1014a1358a362f9171cdb073</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a771714902fb113445597a1fd2a24e8cd</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>abb7d47c85374301ec48e7c5f3ee1c71a</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a6050abda53e8d371cf328179ef70a1f7</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a14386eeea63b71de792b8a752ee5d4df</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a40b4b23ccd23a205a2c2298853066aba</anchor>
      <arglist>(std::ostream &amp;lhs, const source_position &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::source_region</name>
    <filename>structtoml_1_1source__region.html</filename>
    <member kind="function">
      <type>optional&lt; std::wstring &gt;</type>
      <name>wide_path</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>a8e9110cd42e834f95e9a12c59909c1c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>source_position</type>
      <name>begin</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>ab36a5db15201864a13fb628f331196d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_position</type>
      <name>end</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>a054940b42dcf83391697ec2b8690531d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_path_ptr</type>
      <name>path</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>a25fc23f579edb8afc0818c013c5ac5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>a9de8ac24a607abd098bb4179520f3734</anchor>
      <arglist>(std::ostream &amp;lhs, const source_region &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::table</name>
    <filename>classtoml_1_1table.html</filename>
    <base>toml::node</base>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a823f0d3385d2d8d8320a72f78c677a35</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8c06941e05e31602d46f26ba84d14b23</anchor>
      <arglist>(const table &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab47a76ab242afa13f1a74e5e2bcded44</anchor>
      <arglist>(table &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7fdc52c0aa1bd67ae6738f029787bc2f</anchor>
      <arglist>(std::initializer_list&lt; impl::table_init_pair &gt; kvps)</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac4bdf5ade95ac5afa472ae1219b8b89d</anchor>
      <arglist>(const table &amp;)</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5c5fd0e11db828ab264eccc96dfdd619</anchor>
      <arglist>(table &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a03d15150652176b1714b70fb035cdeb0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abe1cc42533dc108b2062de2666471faa</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af1a2f48edbb3afa9363c392595830846</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8a0a8d4e44883a2467798dad07ddcb43</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2cdfa1fd3e9d5c64cb5d4089a1d4344e</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a56d186a17d8e24bfa90fa6578e7b3872</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a52e6d4f667e464a49ac4928c8ed31fec</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aae222bf8089461dd4954311d1e403386</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6bf5f3666709891c5c6beba70835604a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1a8b05c8de343cff20b47189d309862b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6eafaab181b8ce2632b5c0556941fb76</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a89392000e892868540f0513f4be45ba2</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a60c4177e5d411c2f8be30f0b99b68189</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3052f7b2bce6add8ef50ea77c59338c4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1fc645d975ce2b07348e1e9f8029d0c1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a38d82efe9d6fc89b5140e5abdde9127d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af9cb47ecee9c13ded1308b64902f8a5c</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a673bdcac9903b7da00c5893f6d7fe8e0</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa8e3920bff569dee33fe8e34ffb6361d</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5b86281620ba34efabf7e3c4bef9675b</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac3b5e969c4aaeebc3c36d514c3b54d5f</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0cd6412f40c200939645028417d789cf</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1b5f7025e387eb10f16d4b3a763db501</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a980f61149308e193282b8f5bfaeda284</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6a33617f7d6d95ef676ce0cb098d2970</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a84fc8b87acc1f9f86384d375893f5d3c</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af2dda58dc42b782b0c36a2367d948957</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa8ab32e1b60f5b3b0bf9539076c89acc</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a98c296e8a635190bab97e886c83f2648</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aaf302e3edd84df4c31765ffb15aed0f2</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abc2f126a04989073083065662df9e72b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5759fb6852495964827f9982e9c8ce12</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a19e3aa65fd09b2f36d98627c432638b1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2fd53fcb036c335021e3ad098cf4d883</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a53be1b93aa90608ed378323df835a2f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8e797a683ff2bacd14d7e7461ecd2780</anchor>
      <arglist>(bool val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae6811ea7c692ac71880693e225c66aed</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a43afae4f760f715c69b0b8aa0a7ef071</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a637ff9b8eb2880a1084f01b7b0725b12</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>add0f0c51c63d385f881022cab988744c</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>afb960c9b2ea8066f917d22d348758513</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa21b91ee2ed48b24bf684b762f01c684</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a32bfcd190cb9a8e06f381097a23d0b66</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0099ccf5df2f15ca17309c1897cb5e61</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae1e3925fca9b027958934a5c015c6c98</anchor>
      <arglist>(std::string_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acadf9153fcdc5019add35426044f369e</anchor>
      <arglist>(std::string_view key) const</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aef4d6369cf64a56322b96f1a15f761c6</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae8429bf4d0d3dd15b82344b575ec2a15</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a554f495f6f2ebc993be1bd0379447051</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad7c4105854cc817bf6e781fa7fb1b6d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acc5180d0f3b1a78f45962f246a5d9605</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3b678ac60d00790308b96f5e51da4274</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aaaffca1b5d53d7b72d2f29c14f06d75e</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2799383d484028ef5f466f8d1d34f315</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a087ecb9d9fd4562d79f83341f0c643c0</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a65a894481bab5dd2bd00690931ed2692</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aacf6efa6e7865211f7a1283f79a88ee0</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab1f12a827212d23ee0895fda92a5113c</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a25f8f4a8c4672042d75b810856bd676f</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7bec8d45353adeac918668a9fc5cb6a2</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1a90984876ccdd03aaa9e0f9801a839f</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a4dafb4ae116d92add973e5f27f880a9d</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a59f4dd9e42b73c9c1ec43134bef7e113</anchor>
      <arglist>(const_iterator begin, const_iterator end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac6064df3f6f23b022884390a9963c1bc</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>add732807ee5e8fde81ceaa33acbaa7c6</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7f4d1d90dcea74d84f70db7e2d70c78a</anchor>
      <arglist>(bool recursive=true) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table &amp;&amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a14a59eed720b4d01840e290f82bb87b5</anchor>
      <arglist>(bool recursive=true) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa710f85c588a1b00c3192d1553de4eef</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace_hint</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0d2378b5d13432bf8e325c388c650189</anchor>
      <arglist>(const_iterator hint, KeyType &amp;&amp;key, ValueArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aed4c994aec5209b69d54d19f306b31bc</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a331eb6de04d95c3f76bf64e6f84d4ad6</anchor>
      <arglist>(Iter begin, Iter end, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert_or_assign</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa160b71ed6bc6fc638b19b5d9a8ef569</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a485d7763c578d716b4f22abb1db3c975</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6d8386049f630c8551597a2180479c7c</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a9b13a19ddfcd2f76685f57587d28701c</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a706215b69aefbcc303e2882341c766eb</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5c4132e9936b1d6b0d9f2ccda7417fd7</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d2b7360a2ea44282890e1ded3d3946a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1fd6d582bdadae6b104440aec7b6e383</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0b717d136b8a8b6f142a56056a570fed</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad1c332ae403fade90216726105419efc</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58fde40ef0b172d36bf293c251b25130</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca651e7fe7f377fe958b20678d08ef14</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9794ed57d952d8293ed3278a11e54ca2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a937af29dc15ef8e1af7950d925341cc3</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a20a0cfac8f31649544db5d9eead609f9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>acf55d2ffe0c31b6a8507fb1265444be2</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aef68f74119416a0a6d0a62f0f7d8d4ea</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>afbd39cca3959da4a1d8e1d220b6abe83</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9b4d952e01bd2fafe7c307d61d4a247f</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca7e24cd0070ce226defd71eb501c4cd</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8c3214e47f056a3a9bcdb66edd7fa97f</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2276f2cac96c095b4e4645ca5bebe0f9</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3d8aefefc9701472d2a314a43deba6d2</anchor>
      <arglist>(std::ostream &amp;lhs, const table &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af8ebaed8105e5de2098992764f2d534a</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abdeb5d9d9fc23c031c78e544c6196ea6</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>toml::table_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a87e055bad435d5332dc496c518733a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>toml::const_table_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a68fea8ca9b1018f9675fd346b9f4512e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a334f050427eb20c8530254f4cd6dddf3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3352f9954e03087b6f596ae23283bd3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a15a5f8bd6d194fcbe925a24e5b73b1fb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a96da67654c5ca131cfec2e3c07aa2730</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a40c72e81de1da66b7083cad11442cb05</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a311451209f990931ea25828c6091714f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a67fd24ac51d4ba8f5e1df54c5a5d30aa</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, table &amp; &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>table &amp;&amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae55e8d274a9e9fb79e167d8d1afcaf96</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, table &amp;&amp; &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>const table &amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac27c78af74855b9a75b38b177a7e7181</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const table &amp; &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>const table &amp;&amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7e86095758aa39070138c2b0c7bd0a61</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const table &amp;&amp; &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a03d15150652176b1714b70fb035cdeb0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abe1cc42533dc108b2062de2666471faa</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af1a2f48edbb3afa9363c392595830846</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8a0a8d4e44883a2467798dad07ddcb43</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2cdfa1fd3e9d5c64cb5d4089a1d4344e</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a56d186a17d8e24bfa90fa6578e7b3872</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a52e6d4f667e464a49ac4928c8ed31fec</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aae222bf8089461dd4954311d1e403386</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6bf5f3666709891c5c6beba70835604a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1a8b05c8de343cff20b47189d309862b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6eafaab181b8ce2632b5c0556941fb76</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a89392000e892868540f0513f4be45ba2</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a60c4177e5d411c2f8be30f0b99b68189</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3052f7b2bce6add8ef50ea77c59338c4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1fc645d975ce2b07348e1e9f8029d0c1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a38d82efe9d6fc89b5140e5abdde9127d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af9cb47ecee9c13ded1308b64902f8a5c</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a673bdcac9903b7da00c5893f6d7fe8e0</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa8e3920bff569dee33fe8e34ffb6361d</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5b86281620ba34efabf7e3c4bef9675b</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac3b5e969c4aaeebc3c36d514c3b54d5f</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0cd6412f40c200939645028417d789cf</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1b5f7025e387eb10f16d4b3a763db501</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a980f61149308e193282b8f5bfaeda284</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6a33617f7d6d95ef676ce0cb098d2970</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a84fc8b87acc1f9f86384d375893f5d3c</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af2dda58dc42b782b0c36a2367d948957</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa8ab32e1b60f5b3b0bf9539076c89acc</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a98c296e8a635190bab97e886c83f2648</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aaf302e3edd84df4c31765ffb15aed0f2</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abc2f126a04989073083065662df9e72b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5759fb6852495964827f9982e9c8ce12</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a19e3aa65fd09b2f36d98627c432638b1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2fd53fcb036c335021e3ad098cf4d883</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a53be1b93aa90608ed378323df835a2f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8e797a683ff2bacd14d7e7461ecd2780</anchor>
      <arglist>(bool val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae6811ea7c692ac71880693e225c66aed</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a43afae4f760f715c69b0b8aa0a7ef071</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a637ff9b8eb2880a1084f01b7b0725b12</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>add0f0c51c63d385f881022cab988744c</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>afb960c9b2ea8066f917d22d348758513</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa21b91ee2ed48b24bf684b762f01c684</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a32bfcd190cb9a8e06f381097a23d0b66</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0099ccf5df2f15ca17309c1897cb5e61</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae1e3925fca9b027958934a5c015c6c98</anchor>
      <arglist>(std::string_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acadf9153fcdc5019add35426044f369e</anchor>
      <arglist>(std::string_view key) const</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aef4d6369cf64a56322b96f1a15f761c6</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae8429bf4d0d3dd15b82344b575ec2a15</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a554f495f6f2ebc993be1bd0379447051</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad7c4105854cc817bf6e781fa7fb1b6d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acc5180d0f3b1a78f45962f246a5d9605</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3b678ac60d00790308b96f5e51da4274</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aaaffca1b5d53d7b72d2f29c14f06d75e</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2799383d484028ef5f466f8d1d34f315</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a087ecb9d9fd4562d79f83341f0c643c0</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a65a894481bab5dd2bd00690931ed2692</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aacf6efa6e7865211f7a1283f79a88ee0</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab1f12a827212d23ee0895fda92a5113c</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a25f8f4a8c4672042d75b810856bd676f</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7bec8d45353adeac918668a9fc5cb6a2</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1a90984876ccdd03aaa9e0f9801a839f</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a4dafb4ae116d92add973e5f27f880a9d</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a59f4dd9e42b73c9c1ec43134bef7e113</anchor>
      <arglist>(const_iterator begin, const_iterator end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac6064df3f6f23b022884390a9963c1bc</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>add732807ee5e8fde81ceaa33acbaa7c6</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7f4d1d90dcea74d84f70db7e2d70c78a</anchor>
      <arglist>(bool recursive=true) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table &amp;&amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a14a59eed720b4d01840e290f82bb87b5</anchor>
      <arglist>(bool recursive=true) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa710f85c588a1b00c3192d1553de4eef</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace_hint</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0d2378b5d13432bf8e325c388c650189</anchor>
      <arglist>(const_iterator hint, KeyType &amp;&amp;key, ValueArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aed4c994aec5209b69d54d19f306b31bc</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a331eb6de04d95c3f76bf64e6f84d4ad6</anchor>
      <arglist>(Iter begin, Iter end, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert_or_assign</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa160b71ed6bc6fc638b19b5d9a8ef569</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a485d7763c578d716b4f22abb1db3c975</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6d8386049f630c8551597a2180479c7c</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a9b13a19ddfcd2f76685f57587d28701c</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a706215b69aefbcc303e2882341c766eb</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5c4132e9936b1d6b0d9f2ccda7417fd7</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d2b7360a2ea44282890e1ded3d3946a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1fd6d582bdadae6b104440aec7b6e383</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0b717d136b8a8b6f142a56056a570fed</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad1c332ae403fade90216726105419efc</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58fde40ef0b172d36bf293c251b25130</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca651e7fe7f377fe958b20678d08ef14</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9794ed57d952d8293ed3278a11e54ca2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a937af29dc15ef8e1af7950d925341cc3</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a20a0cfac8f31649544db5d9eead609f9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>acf55d2ffe0c31b6a8507fb1265444be2</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aef68f74119416a0a6d0a62f0f7d8d4ea</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>afbd39cca3959da4a1d8e1d220b6abe83</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9b4d952e01bd2fafe7c307d61d4a247f</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca7e24cd0070ce226defd71eb501c4cd</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8c3214e47f056a3a9bcdb66edd7fa97f</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2276f2cac96c095b4e4645ca5bebe0f9</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af8ebaed8105e5de2098992764f2d534a</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abdeb5d9d9fc23c031c78e544c6196ea6</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::time</name>
    <filename>structtoml_1_1time.html</filename>
    <member kind="function">
      <type></type>
      <name>time</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a460d6626a20b992f38c676bf5ee62a20</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>time</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>acaec3dc6784706c57cc712ab403123e6</anchor>
      <arglist>(H h, M m, S s=S{}, NS ns=NS{}) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>hour</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a18f32a58846d333f9e866b725b7b7ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>minute</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a02de4fe041dfa9535eb4df60d86f7fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>second</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a8ae0ab849a761543207ca86a2e1d0fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>nanosecond</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a3e9c60650ccd21f1e47132b777547185</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>aa88d156f8ea405513e00702b3c88de2f</anchor>
      <arglist>(const time &amp;lhs, const time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a76766a077e105960758caa4a9cbfd25b</anchor>
      <arglist>(const time &amp;lhs, const time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a220d5428532dc59f1846f29159430be8</anchor>
      <arglist>(const time &amp;lhs, const time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a459d4906732bd6c6129de62f1c601a60</anchor>
      <arglist>(const time &amp;lhs, const time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a8564e5d443652ec48b50acedee1ab64c</anchor>
      <arglist>(const time &amp;lhs, const time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>ae551c63caf265a78d5a73c797ee538f5</anchor>
      <arglist>(const time &amp;lhs, const time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>aad81b91942de3b3f2d54656c8a686ee7</anchor>
      <arglist>(std::ostream &amp;lhs, const time &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::time_offset</name>
    <filename>structtoml_1_1time__offset.html</filename>
    <member kind="function">
      <type></type>
      <name>time_offset</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a49af2cb136f213443f15e108657f5f0e</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>time_offset</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a9e963488f164473ee9af35ddf7d4f93e</anchor>
      <arglist>(H h, M m) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>minutes</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a2f4cd0259300e318defc0c5efde592dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>ad9423ee067d0a4c0ba39deb2679a07f6</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a77e5bb056ffcd6a91b1740333f23b806</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>afe1582662b6922546524d14c1588cf9d</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a4a0886d9ad65963a4e812576ba0c6928</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>aa5270a5c11af2a9344d2c20911643429</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a0146123daf63c677b2559aaf9bda1338</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>ac87df01b4e60bd303d75712470517451</anchor>
      <arglist>(std::ostream &amp;lhs, const time_offset &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::toml_formatter</name>
    <filename>classtoml_1_1toml__formatter.html</filename>
    <member kind="function">
      <type></type>
      <name>toml_formatter</name>
      <anchorfile>classtoml_1_1toml__formatter.html</anchorfile>
      <anchor>a8110aaa1057d7633428f6795ac14983a</anchor>
      <arglist>(const toml::node &amp;source, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toml_formatter</name>
      <anchorfile>classtoml_1_1toml__formatter.html</anchorfile>
      <anchor>a3af0ca99139edbd30845a5cd7d2c0137</anchor>
      <arglist>(const toml::parse_result &amp;result, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr format_flags</type>
      <name>default_flags</name>
      <anchorfile>classtoml_1_1toml__formatter.html</anchorfile>
      <anchor>a0aa00006896f1b23e8bb2ec1a6842845</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1toml__formatter.html</anchorfile>
      <anchor>a50815f484095776407f34b1694bbf73e</anchor>
      <arglist>(std::ostream &amp;lhs, toml_formatter &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1toml__formatter.html</anchorfile>
      <anchor>af02b5eabe1e84be843255c7cf02e8dda</anchor>
      <arglist>(std::ostream &amp;lhs, toml_formatter &amp;&amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::value</name>
    <filename>classtoml_1_1value.html</filename>
    <templarg></templarg>
    <base>toml::node</base>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad87b8c7ec465c424b861aba2d4cd5526</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>value_arg</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ac1316850f0671bab2505d126570e3660</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab7aa8ba30bd6ead7db1e9cadbff39e22</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(noexcept(value_type(impl::native_value_maker&lt; value_type, std::decay_t&lt; Args &gt;... &gt;::make(static_cast&lt; Args &amp;&amp; &gt;(args)...))))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a62ace5d37c6cf09fdc589efa5e0a0905</anchor>
      <arglist>(const value &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a65e6e8fa27455d83ad3ada020e11cf91</anchor>
      <arglist>(const value &amp;other, value_flags flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adfb0250a9769fea9d585609db77bc64a</anchor>
      <arglist>(value &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5f6f5a83b2dc3f5842f7fd5fbc0e4f59</anchor>
      <arglist>(value &amp;&amp;other, value_flags flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a339731a8213b5e0993b5547067fde1f7</anchor>
      <arglist>(const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a958da7aae3ff90094e348ebceaa4aa5d</anchor>
      <arglist>(value &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a08950deffd1a5568154d58d27517c973</anchor>
      <arglist>(value_arg rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a69ed0d45e2de5929fea3375cd68960eb</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a66f31db0fe4aa1a65fff1ce3bb8be1eb</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5097925569d4e2f581907dc692aefe02</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a40d4ea2ff0d393245fc31dfc6a0f27fb</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4169ed284f3a6d31e838f117dc2f3df0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a160b4dd33afd4d8c02b1a4c7bc48f17f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6676776ebf94891825c658432252cab0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5d1d988a74ab5c6e6cae9706891083f3</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a98d477b7ee151d7fc68c49ea7c52a314</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad5b1844c180a0fb2de06ed4cdbb259a4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aa5b3aac577c60b24f31550f8b7add69f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad40ad64d9a8f0256e550a9226dbed121</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6816cd2fbae35e21990d3d5616da595a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a47ebc97c4b51999c81eb053d453ac916</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a9a1a2e0a15181c6677d14a2812e34878</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1e8fb6a37f65fff99a631ade34ab6db4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a684976e4e2ea671e7bd21c39a4f73575</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5e2f5338ace567ec7bc755885b793c01</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a9a7177395eb559e2ed2c117832dace2a</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a170f66cced91fc2886c22df7d45f8f73</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab95947fa235b163c138d925425035059</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab06706bf668f496a6d24d6891b34b464</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>afd03f397e42e97c8c3e045c4b19b609e</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4314057128266b74095454cca743a27d</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a49cf272fa0f71b73938df7ddffcc8b1c</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a8b5c3b02c365287e9b563dbe11c7172c</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5d7017fd9eec74756496960956a92d6a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a316fa5b1b2764447c8d51c38071f79c1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aac0acf026dfb903349ce49321153f55d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af2a3d05b2ef1ff57291d3d4c660b86d6</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3a81671d39b75363ba7c2b3fd6b7644a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a40247e128f2ffdb5386ee41b2a84b52d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a725874485bb19ade041deb8869bff6d5</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad297cd1ba10960e125e5a0c75ea51ff4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af607a8347e5918b35fcfb11e8f7d4398</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b4ea781b83a3c164df24129d0e73341</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3a0ec9ea9604d68ba9a9a4692868f8d8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ae3bb95e7af4622ded16328b827a6089d</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a054c1fb796a4e560d4afb27019bb1aef</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a64ad94a1086eedde1a94f12f020498d2</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a15e56286d17f11a4d567eaddb36368f8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a752f50ec7dac91b579e48db6a15f388e</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adaf04b51fea2bdc3da39fbf63c240b3b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;&amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad5d4a1c818d7004bc4c42219edf84dd9</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aeaa7f385c753bc7f11f0758d8ae325b6</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;&amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aef9bb783e7c8ba475838742b7cfc3178</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a79983137e697848cb82a95b265b03d4d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a23ab1c59bf4ec4bc19b6fa3fcf399171</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_flags</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1a213908a7297491a07e647967897fcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4311828058d75bfaa2c01c3395d09385</anchor>
      <arglist>(value_flags new_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d2b7360a2ea44282890e1ded3d3946a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1fd6d582bdadae6b104440aec7b6e383</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0b717d136b8a8b6f142a56056a570fed</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad1c332ae403fade90216726105419efc</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58fde40ef0b172d36bf293c251b25130</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca651e7fe7f377fe958b20678d08ef14</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9794ed57d952d8293ed3278a11e54ca2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a937af29dc15ef8e1af7950d925341cc3</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a20a0cfac8f31649544db5d9eead609f9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>acf55d2ffe0c31b6a8507fb1265444be2</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aef68f74119416a0a6d0a62f0f7d8d4ea</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>afbd39cca3959da4a1d8e1d220b6abe83</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9b4d952e01bd2fafe7c307d61d4a247f</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca7e24cd0070ce226defd71eb501c4cd</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8c3214e47f056a3a9bcdb66edd7fa97f</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2276f2cac96c095b4e4645ca5bebe0f9</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ae160ab8204a4ed57dac2ad6c5aebb683</anchor>
      <arglist>(std::ostream &amp;lhs, const value &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b90e4f85ecaf2c81e4ba8b42aa5ce34</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1771aa33bd2d425b542d0b9d0e90866d</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6bbe09942bd6046fa94addb911940491</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a7d02565c608c663afc8f3d2102639740</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a2f37f69d3e477c0c2e2ba16f6919815e</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ace8c00e345c69ee93e5d2bd2df694340</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af200f2be4273ed0923743f4b918f86e6</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a80417b5055072f20d3a6985d1b78af21</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a727e2acd21edf04a144918d174706ba6</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a2fa446100047d052d0cca2c1f3f60085</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a872e565adfbcd201f2ab1e3103699758</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a7fdc4f87f9ec3efb896cc3e09694328b</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ac6af15f59d537d95d1afe887b12b697e</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab95d07a7f48e44baefbacbf5f6072837</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0ebdea821d98546de4b686f450506637</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a69ed0d45e2de5929fea3375cd68960eb</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a66f31db0fe4aa1a65fff1ce3bb8be1eb</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5097925569d4e2f581907dc692aefe02</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a40d4ea2ff0d393245fc31dfc6a0f27fb</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4169ed284f3a6d31e838f117dc2f3df0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a160b4dd33afd4d8c02b1a4c7bc48f17f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6676776ebf94891825c658432252cab0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5d1d988a74ab5c6e6cae9706891083f3</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a98d477b7ee151d7fc68c49ea7c52a314</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad5b1844c180a0fb2de06ed4cdbb259a4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aa5b3aac577c60b24f31550f8b7add69f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad40ad64d9a8f0256e550a9226dbed121</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6816cd2fbae35e21990d3d5616da595a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a47ebc97c4b51999c81eb053d453ac916</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a9a1a2e0a15181c6677d14a2812e34878</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1e8fb6a37f65fff99a631ade34ab6db4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a684976e4e2ea671e7bd21c39a4f73575</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5e2f5338ace567ec7bc755885b793c01</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a9a7177395eb559e2ed2c117832dace2a</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a170f66cced91fc2886c22df7d45f8f73</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab95947fa235b163c138d925425035059</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab06706bf668f496a6d24d6891b34b464</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>afd03f397e42e97c8c3e045c4b19b609e</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4314057128266b74095454cca743a27d</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a49cf272fa0f71b73938df7ddffcc8b1c</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a8b5c3b02c365287e9b563dbe11c7172c</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5d7017fd9eec74756496960956a92d6a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a316fa5b1b2764447c8d51c38071f79c1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aac0acf026dfb903349ce49321153f55d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af2a3d05b2ef1ff57291d3d4c660b86d6</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3a81671d39b75363ba7c2b3fd6b7644a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a40247e128f2ffdb5386ee41b2a84b52d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a725874485bb19ade041deb8869bff6d5</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad297cd1ba10960e125e5a0c75ea51ff4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af607a8347e5918b35fcfb11e8f7d4398</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b4ea781b83a3c164df24129d0e73341</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3a0ec9ea9604d68ba9a9a4692868f8d8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ae3bb95e7af4622ded16328b827a6089d</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a054c1fb796a4e560d4afb27019bb1aef</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a64ad94a1086eedde1a94f12f020498d2</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a15e56286d17f11a4d567eaddb36368f8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a752f50ec7dac91b579e48db6a15f388e</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adaf04b51fea2bdc3da39fbf63c240b3b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;&amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad5d4a1c818d7004bc4c42219edf84dd9</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aeaa7f385c753bc7f11f0758d8ae325b6</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;&amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aef9bb783e7c8ba475838742b7cfc3178</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a79983137e697848cb82a95b265b03d4d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a23ab1c59bf4ec4bc19b6fa3fcf399171</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_flags</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1a213908a7297491a07e647967897fcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4311828058d75bfaa2c01c3395d09385</anchor>
      <arglist>(value_flags new_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d2b7360a2ea44282890e1ded3d3946a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1fd6d582bdadae6b104440aec7b6e383</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0b717d136b8a8b6f142a56056a570fed</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad1c332ae403fade90216726105419efc</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58fde40ef0b172d36bf293c251b25130</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca651e7fe7f377fe958b20678d08ef14</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9794ed57d952d8293ed3278a11e54ca2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a937af29dc15ef8e1af7950d925341cc3</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a20a0cfac8f31649544db5d9eead609f9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>acf55d2ffe0c31b6a8507fb1265444be2</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aef68f74119416a0a6d0a62f0f7d8d4ea</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>afbd39cca3959da4a1d8e1d220b6abe83</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9b4d952e01bd2fafe7c307d61d4a247f</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aca7e24cd0070ce226defd71eb501c4cd</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8c3214e47f056a3a9bcdb66edd7fa97f</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2276f2cac96c095b4e4645ca5bebe0f9</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b90e4f85ecaf2c81e4ba8b42aa5ce34</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1771aa33bd2d425b542d0b9d0e90866d</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6bbe09942bd6046fa94addb911940491</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a7d02565c608c663afc8f3d2102639740</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a2f37f69d3e477c0c2e2ba16f6919815e</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ace8c00e345c69ee93e5d2bd2df694340</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af200f2be4273ed0923743f4b918f86e6</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a80417b5055072f20d3a6985d1b78af21</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a727e2acd21edf04a144918d174706ba6</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a2fa446100047d052d0cca2c1f3f60085</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a872e565adfbcd201f2ab1e3103699758</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a7fdc4f87f9ec3efb896cc3e09694328b</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ac6af15f59d537d95d1afe887b12b697e</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab95d07a7f48e44baefbacbf5f6072837</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0ebdea821d98546de4b686f450506637</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::yaml_formatter</name>
    <filename>classtoml_1_1yaml__formatter.html</filename>
    <member kind="function">
      <type></type>
      <name>yaml_formatter</name>
      <anchorfile>classtoml_1_1yaml__formatter.html</anchorfile>
      <anchor>a0089cdd517d9f6641ed10c8ddb5b1c11</anchor>
      <arglist>(const toml::node &amp;source, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>yaml_formatter</name>
      <anchorfile>classtoml_1_1yaml__formatter.html</anchorfile>
      <anchor>a2eb50c4983f7ec26a417befeface23bf</anchor>
      <arglist>(const toml::parse_result &amp;result, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr format_flags</type>
      <name>default_flags</name>
      <anchorfile>classtoml_1_1yaml__formatter.html</anchorfile>
      <anchor>af161f0a6c794945e85b210ee85cb78e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1yaml__formatter.html</anchorfile>
      <anchor>a10b0c89256eb2ab4ea2b4e23f8ad8eff</anchor>
      <arglist>(std::ostream &amp;lhs, yaml_formatter &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1yaml__formatter.html</anchorfile>
      <anchor>a50d463617bccb66a9cdf01390321bd47</anchor>
      <arglist>(std::ostream &amp;lhs, yaml_formatter &amp;&amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>toml</name>
    <filename>namespacetoml.html</filename>
    <namespace>toml::literals</namespace>
    <class kind="class">toml::array</class>
    <class kind="struct">toml::date</class>
    <class kind="struct">toml::time</class>
    <class kind="struct">toml::time_offset</class>
    <class kind="struct">toml::date_time</class>
    <class kind="struct">toml::inserter</class>
    <class kind="class">toml::json_formatter</class>
    <class kind="class">toml::key</class>
    <class kind="class">toml::node</class>
    <class kind="class">toml::node_view</class>
    <class kind="class">toml::parse_error</class>
    <class kind="class">toml::parse_result</class>
    <class kind="class">toml::path_component</class>
    <class kind="class">toml::path</class>
    <class kind="struct">toml::source_position</class>
    <class kind="struct">toml::source_region</class>
    <class kind="class">toml::table</class>
    <class kind="class">toml::toml_formatter</class>
    <class kind="class">toml::value</class>
    <class kind="class">toml::yaml_formatter</class>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>array_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ac7e383cde1b8d61dba45292b2b0fcb69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>const_array_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aeba9fe3a193c8b641a1fb3a2096d7c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>toml_formatter</type>
      <name>default_formatter</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2b87b5d257f54773683328031f453e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>inserted_type_of</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aef1f0bbcdd3686e268f4b81d9da701be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>source_index</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>afb852fa22a8b3ea9d200d645b9d5c308</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const std::string &gt;</type>
      <name>source_path_ptr</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ac6cf446b480546ae1f71f5b86442368d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>af34a9fb3305e419784104609e6bbb7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a19243ec6febf1bb834ea9e366405e317</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>const_table_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a4bccd753f54404e0097457514177fcbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>node_type</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>abac3e84bbf1f2c90717fca107055f48d</anchor>
      <arglist></arglist>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48daaab9e1de16f38176f86d7a92ba337a8d">table</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48daf1f713c9e000f5d3f280adbd124df4f5">array</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48dab45cffe084dd3d20d928bee85e7b0f21">string</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da157db7df530023575515d366c9b672e8">integer</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da387f7c620a256fdffcec74c1e7181a2a">floating_point</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da84e2c64f38f78ba3ea5c905ab5a2da27">boolean</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da5fc732311905cb27e82d67f4f6511f7f">date</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da07cc694b9b3fc636710fa08b6922c42b">time</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48dad611c46f8e65d9e049afe165de18c264">date_time</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>value_flags</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a73eba6a34e7c7c4a4d311100800e1bb5</anchor>
      <arglist></arglist>
      <enumvalue file="namespacetoml.html" anchor="a73eba6a34e7c7c4a4d311100800e1bb5a334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a73eba6a34e7c7c4a4d311100800e1bb5a3d21a9285de175ffffc99cfa13df21df">format_as_binary</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a73eba6a34e7c7c4a4d311100800e1bb5adfc26763754dabbdf97d3c8833a2e8ba">format_as_octal</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a73eba6a34e7c7c4a4d311100800e1bb5a4dd3fec464b7da02debfbc0bd4725c29">format_as_hexadecimal</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>format_flags</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2102aa80bc57783d96180f36e1f64f6a</anchor>
      <arglist></arglist>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa6e569050aafc6eca4c0c5dfab35fd25a">quote_dates_and_times</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aaebc5b9f8f77d6df3c806339479f46098">quote_infinities_and_nans</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa328473763ff1ab919ce0b01d66ad3bf6">allow_literal_strings</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aad9467c39215be4189dc8395a830f9051">allow_multi_line_strings</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa85cd74c0ce79c211961b6db05587778c">allow_real_tabs_in_strings</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aab8d4fc7b15531737d6d22536c5f3881c">allow_unicode_strings</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aae8dbe11e331b30941899ce81fd2fee41">allow_binary_integers</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa3d184bcd6e8f69ebc29b148945f23d4e">allow_octal_integers</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa41e4d7c47742f8f5b60161cc594b169b">allow_hexadecimal_integers</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa4ccbf147a4e194e7d2ae2b242e1eeceb">indent_sub_tables</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa8bf21ed1736197d191a147317c7ea95b">indent_array_elements</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa449072e30b43d04b744f22522a880818">indentation</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa2023489f273b06937dd37c25b2cf2078">relaxed_float_precision</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a2102aa80bc57783d96180f36e1f64f6aa4c8bfd397c155cf5841842cdbb556edd">terse_key_value_pairs</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>path_component_type</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a05daf3902d4363b06fb467a3292c0bc5</anchor>
      <arglist></arglist>
      <enumvalue file="namespacetoml.html" anchor="a05daf3902d4363b06fb467a3292c0bc5a3c6e0b8a9c15224a8228b9a98ca1531d">key</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="a05daf3902d4363b06fb467a3292c0bc5aa59d1ac564bcca436d50c942090e4259">array_index</enumvalue>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a034ab5f50d46f89dcaf871a788d56be9</anchor>
      <arglist>(node &amp;root, std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>acecea9874ff621405e1c3f38433ba56d</anchor>
      <arglist>(const node &amp;root, std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a6355193bb51dc19b1f1509c6dac46b23</anchor>
      <arglist>(node &amp;root, std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aef2c5186913edbd8daf4a3d525fa5333</anchor>
      <arglist>(const node &amp;root, std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aba6195d5e83ab18f30c9a211384e2c1a</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, node_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ada8654fb4ceef15c20fc1d5e0cc734dd</anchor>
      <arglist>(std::string_view doc, std::string_view source_path={})</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a20fa3e08d72759083fb17c772a357043</anchor>
      <arglist>(std::string_view doc, std::string &amp;&amp;source_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse_file</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a8dbc58dad43c3b66f4476a7131f5741a</anchor>
      <arglist>(std::string_view file_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ae9ee4300ddfbd72b7237283ab8d97618</anchor>
      <arglist>(std::u8string_view doc, std::string_view source_path={})</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a02a2724564149ad8439c0457357308b8</anchor>
      <arglist>(std::u8string_view doc, std::string &amp;&amp;source_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse_file</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>acdbabd4b771d221fe98b0053d848d69d</anchor>
      <arglist>(std::u8string_view file_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a01565f26a7982d162949bac3b554a334</anchor>
      <arglist>(std::string_view doc, std::wstring_view source_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ac7767943620762c22b6341dc6682cc2d</anchor>
      <arglist>(std::istream &amp;doc, std::wstring_view source_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse_file</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad425af491341206589ca6acc37c3b19e</anchor>
      <arglist>(std::wstring_view file_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a38852451309f406db281f17334ea8dfe</anchor>
      <arglist>(std::u8string_view doc, std::wstring_view source_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2ee84ffccded737ab40afcb8122d8277</anchor>
      <arglist>(std::istream &amp;doc, std::string_view source_path={})</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a8079e71bd86722701ca91828c6709305</anchor>
      <arglist>(std::istream &amp;doc, std::string &amp;&amp;source_path)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a5a5b291fdf3ecb9ad8bef4d6e689c402</anchor>
      <arglist>(node &amp;root, const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aaf452c3c4696e20eeabd11669db66a9e</anchor>
      <arglist>(const node &amp;root, const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr value_flags</type>
      <name>preserve_source_value_flags</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a32f700b152e15c357801e905d626a4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad11c8c8a8286d6931e40658679aa7ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_array</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2251b703f3ec4d1a3036c82ead3d69cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_container</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad6c6e1677e1cc564d40efa89af2514a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_string</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aea14621807afe92a840d82c7139cde07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a513bdc4a19071f0be70e92bb6cb1a1a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_floating_point</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a1aaaa0e264cdd4f43518571f2f61ac36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a64ce7ed6974d2b17823565bc67c40873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_boolean</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a8e79820651cc9a835082cf9abd47d885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_date</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a3c5daa4563e3aff2b5e6460aa97d28df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_time</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a87aee32768a32bb838150421e4e3cf97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_date_time</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a3285caf012789a607851026f9827a33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_chronological</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a7f8764060ca7dccb7e829f67d82c0485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_value</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a0d9cd265e448130b95305ccd68d2f508</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_node</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a4e4126f63ba560963de095cd9bee0704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_node_view</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ab5b06dac8c1e0de9e06411917e10b618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_key</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a7b8ef907d9629d139a30d874b345b195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_key_or_convertible</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a052fafde71907ef3a8590ef7ec2455d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>toml::literals</name>
    <filename>namespacetoml_1_1literals.html</filename>
    <member kind="function">
      <type>parse_result</type>
      <name>operator&quot;&quot;_toml</name>
      <anchorfile>namespacetoml_1_1literals.html</anchorfile>
      <anchor>a401530e560c2dc540729af01e10b2a74</anchor>
      <arglist>(const char *str, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>operator&quot;&quot;_toml</name>
      <anchorfile>namespacetoml_1_1literals.html</anchorfile>
      <anchor>abb2307d66538d0d43dd074040f83224c</anchor>
      <arglist>(const char8_t *str, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>path</type>
      <name>operator&quot;&quot;_tpath</name>
      <anchorfile>namespacetoml_1_1literals.html</anchorfile>
      <anchor>ad406c84d960dd5bda91564f738f67d47</anchor>
      <arglist>(const char *str, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>configuration</name>
    <title>Library Configuration</title>
    <filename>group__configuration.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TOML_CONFIG_HEADER</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga09204feb4a3ff5534623c2bd052dcec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_HEADER_ONLY</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga8219bfd7e75587516385b6022b28abc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_HEADER_ONLY</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga8219bfd7e75587516385b6022b28abc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_IMPLEMENTATION</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga27ee69835a1ddff9dbaf3015b4b08a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXPORTED_CLASS</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga3d7aebf91431575688d573f09a17559a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXPORTED_MEMBER_FUNCTION</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>gadf515bb7a6b8ce6b14bf86c8961a63cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXPORTED_STATIC_FUNCTION</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga8436c6f378c73f3446a3b6f1e2c5e81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXPORTED_FREE_FUNCTION</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>gac40a454cde06de4e76df3d6d460a3544</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ENABLE_UNRELEASED_FEATURES</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga1110ff7d189a7738b9109d120f568b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ENABLE_PARSER</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga121912d75d4624de6ab6854e41d8a852</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ENABLE_FORMATTERS</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga9fc77582d9de77f59d2ddc9ae1f748ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ENABLE_WINDOWS_COMPAT</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga94867db67c98e0e9d4fbb70690951fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_OPTIONAL_TYPE</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga9c2c03f867eb6d76a5f65b06eeb1186e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXCEPTIONS</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga93097ecd88ca4bca393f60a78bda643b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_CALLCONV</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga2bfc7ae4747f15378d92249aadce019e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_SMALL_FLOAT_TYPE</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga11a3368da40938a6b5cfd898320706f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ASSERT</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga8c407a8f6fe52a795db35be3f00393f8</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_SMALL_INT_TYPE</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga0722fa2c57da6360c7f2ba08c60e1a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ENABLE_FLOAT16</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga56ab81041897681ac38ceba52a380b97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>poxy_changelog</name>
    <title>Changelog</title>
    <filename>poxy_changelog.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>toml++</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Features">mainpage-features</docanchor>
    <docanchor file="index.html" title="API documentation">mainpage-api-documentation</docanchor>
    <docanchor file="index.html" title="Basic examples">mainpage-example</docanchor>
    <docanchor file="index.html" title="Parsing files">mainpage-example-parsing-files</docanchor>
    <docanchor file="index.html" title="Parsing strings and iostreams">mainpage-example-parsing-strings</docanchor>
    <docanchor file="index.html" title="Handling errors without exceptions">mainpage-example-parsing-without-exceptions</docanchor>
    <docanchor file="index.html" title="Custom error formatting">mainpage-example-custom-error-formatting</docanchor>
    <docanchor file="index.html" title="Working with TOML data">mainpage-example-manipulations</docanchor>
    <docanchor file="index.html" title="Serializing as TOML, JSON and YAML">mainpage-example-serialization</docanchor>
    <docanchor file="index.html" title="Speeding up compilation">mainpage-example-speed-up-compilation</docanchor>
    <docanchor file="index.html" title="Adding toml++ to your project">mainpage-adding-lib</docanchor>
    <docanchor file="index.html" title="&quot;The old fashioned way&quot;">mainpage-adding-lib-old-school</docanchor>
    <docanchor file="index.html" title="Conan">mainpage-adding-lib-conan</docanchor>
    <docanchor file="index.html" title="DDS">mainpage-adding-lib-dds</docanchor>
    <docanchor file="index.html" title="Meson">mainpage-adding-lib-meson</docanchor>
    <docanchor file="index.html" title="Tipi.build">mainpage-adding-lib-tipi</docanchor>
    <docanchor file="index.html" title="Vcpkg">mainpage-adding-lib-vcpkg</docanchor>
    <docanchor file="index.html" title="CMake FetchContent">mainpage-adding-lib-cmake-fetch-content</docanchor>
    <docanchor file="index.html" title="Git submodules">mainpage-adding-lib-git-submodules</docanchor>
    <docanchor file="index.html" title="Other environments and package managers">mainpage-adding-lib-other</docanchor>
    <docanchor file="index.html" title="Special mention: Python">mainpage-adding-lib-python</docanchor>
    <docanchor file="index.html" title="Library configuration options">mainpage-configuration</docanchor>
    <docanchor file="index.html" title="Contributing">mainpage-contributing</docanchor>
    <docanchor file="index.html" title="License">mainpage-license</docanchor>
    <docanchor file="index.html" title="Contacting the author">mainpage-contact</docanchor>
  </compound>
</tagfile>
